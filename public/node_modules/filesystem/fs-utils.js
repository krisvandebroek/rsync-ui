"use strict";

var df = require('nodejs-disks')
    , _ = require('underscore')
    , async = require('async')
    , fs = require('fs')
    , path = require('path');

_.string = require('underscore.string');
_.mixin(_.string.exports());


var getDrives = function (callback) {
    df.drives(function (error, driveNames) {
        if (error) {
            callback(error);
        } else {
            async.map(driveNames, getDriveDetail, callback);
        }
    });
};

var getDriveDetail = function (drive, callback) {
    df.driveDetail(drive, callback);
};

var getDriveForPath = function (filePath, callback) {
    async.waterfall([
        function verifyPathIsMounted(callback) {
            fs.lstat(filePath, function (error) {
                callback(error);
            })
        },
        function retrieveDrives(callback) {
            getDrives(function (error, drives) {
                callback(error, drives);
            });
        },
        function findBestMatchingMountpoint(drives, callback) {
            var bestMatch;
            for (var i = 0; i < drives.length; i++) {
                var mountpoint = drives[i].mountpoint;
                if (_.startsWith(filePath, mountpoint)) {
                    if (bestMatch == undefined || mountpoint.length > bestMatch.mountpoint.length) {
                        bestMatch = drives[i];
                    }
                }
            }
            if (bestMatch) {
                callback(null, bestMatch);
            } else {
                callback('No drive found matching the path: ' + filePath, null);
            }
        }
    ], callback);
};

var getSize = function (filePath, callback) {
    fs.lstat(filePath, function (err, stat) {
        if (err || !stat) return callback(null, 0);

        var size = (512 * stat.blocks);

        if (!stat.isDirectory())
            return callback(null, size);
        var dir = filePath;

        fs.readdir(dir, function (err, files) {
            if (err) {
                return callback(null, 0);
            }

            async.map(
                files.map(function (filename) {
                    return path.join(dir, filename)
                })
                , function (childFilePath, callback) {
                    return getSize(childFilePath, callback)
                }
                , function (err, sizes) {
                    callback(
                        err
                        , sizes && sizes.reduce(function (p, s) {
                            return p + s
                        }, size)
                    )
                }
            );
        })
    })
};

module.exports.getDrives = getDrives;
module.exports.getDriveDetail = getDriveDetail;
module.exports.getDriveForPath = getDriveForPath;
module.exports.getSize = getSize;

"use strict";

var fs = require('fs'),
    _ = require('underscore');

_.string = require('underscore.string');
_.mixin(_.string.exports());

var parseFilterFile = function (filePath) {
    var data = fs.readFileSync(filePath, {encoding: 'utf-8'});
    var lines = _.lines(data);
    var filterLines = _.map(lines, function (line) {
        var filterLine = {};
        filterLine.original = line;
        filterLine.filterType = line.charAt(0);
        filterLine.filter = _.strRight(line, filterLine.filterType + ' ');
        filterLine.matcher = parseFilter(filterLine.filter);
        return filterLine;
    });
    var relevantLines = _.filter(filterLines, function (filterLine) {
        var COMMENT_LINE_PREFIX = '#';
        return !_.isBlank(filterLine.filterType) && !_.contains([COMMENT_LINE_PREFIX], filterLine.filterType);
    });
    var filters = _.map(relevantLines, function (filterLine) {
        switch (filterLine.filterType) {
            case 'P':
                //
                break;
            case '-':
                //
                break;
            case '+':
                //
                break;
            case 'H':
                //
                break;
            default:
                throw new Error('Filter file rule: \'' + filterLine.charAt(0) + '\'');
        }
        ;
        return filterLine;
    });
};

var parseFilterRule = function (filterRule) {
    return {
        /**
         * Precondition: the parent directory of filePath already matched
         * @param filePath
         * @param baseDir
         * @param directory
         * @returns {boolean}
         */
        matches: function (filePath, baseDir, directory) {
            // Ensure basedir has a trailing slash
            if (!_.endsWith(baseDir, '/')) baseDir = baseDir + '/';
            var relativePath = _.strRight(filePath, baseDir);
            var regex;
            if (_.startsWith(filterRule, '/')) {
                // Matching relative from the basedir
                var matcherPart = _.strRight(filterRule, '/');
                if (directory && _.endsWith(filterRule, '/')) {
                    matcherPart = _.strLeftBack(matcherPart, '/') + '/?';
                }

                if (_.endsWith(matcherPart, '/***')) {
                    matcherPart = _.strLeftBack(matcherPart, '/***') + '(/?|/.*)';
                }
                regex = new RegExp('^' + matcherPart + '$');
                console.log('File Path: ' + filePath);
                console.log('Relative Path: ' + relativePath);
                console.log('Base Dir: ' + baseDir);
                console.log('RegExp: ' + regex);
                console.log('Result: ' + regex.test(relativePath));
                console.log('Result: ' + regex.test(relativePath));
                return regex.test(relativePath);
            } else {
                // Matching relative from the parent directory
                var matcherPart = filterRule;
                if (_.endsWith(matcherPart, '/')) {
                    matcherPart = _.strLeftBack(matcherPart, '/') + '/?';
                } else {
                    matcherPart = matcherPart + '/?';
                }
                regex = new RegExp('^.*/' + matcherPart + '$');
                return regex.test(filePath);
            }
            return false;
        }
    }
}

function parseFilter(filter) {

    /**
     * /xyz -> ^xyz otherwise ./xyz
     */
}

module.exports.parseFilterFile = parseFilterFile;
module.exports.parseFilterRule = parseFilterRule;
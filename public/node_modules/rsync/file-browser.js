"use strict";

var fs = require('fs')
    , async = require('async')
    , path = require('path')
    , _ = require('underscore')
    , fsUtils = require('filesystem/fs-utils');

_.string = require('underscore.string');
_.mixin(_.string.exports());

/**
 * @param path {String}
 * @param callback {function(String, RsyncNode)}
 */
var getRootNode = function (path, callback) {
    return getNode(undefined, path, callback);
};

/**
 * @param rootNode {RsyncNode}
 * @param path {String}
 * @param callback {function(String, RsyncNode)}
 */
var getChildNode = function (rootNode, path, callback) {
    return getNode(rootNode, path, callback);
};

/**
 * @param rootNode {RsyncNode}
 * @param path {String}
 * @param callback {function(String, RsyncNode)}
 */
var getNode = function (rootNode, path, callback) {
    fs.stat(path, function (err, stats) {
        if (err) {
            callback(err, null);
        } else {
            var node = new RsyncNode();
            node.isDirectory = stats.isDirectory();
            node.path = path;
            node.name = _.strRightBack(path, '/');
            node.bytes = stats.size;
            node.collapsed = true;
            node.parent = rootNode;
            node.children = undefined;
            callback(null, node);
        }
    });
};

var RsyncNode = function RsyncNode() {
    this.isDirectory = undefined;
    this.path = undefined;
    this.name = undefined;
    this.bytes = undefined;
    this.collapsed = undefined;
    this.parent = undefined;
    this.children = undefined;
    this.size = undefined;
};

/**
 * @param parentNode {Node}
 * @param callback {function(String, Node)}
 */
var loadChildren = function (parentNode, callback) {
    fs.readdir(parentNode.path, function (err, files) {
        if (err) return callback(err);
        files.sort(function (a, b) {
            return a.toLowerCase().localeCompare(b.toLowerCase());
        });
        async.map(files, function (file, mapCallback) {
            getChildNode(parentNode, path.join(parentNode.path, file), mapCallback);
        }, function (error, results) {
            if (error) {
                callback(error);
            } else {
                parentNode.children = results;
                callback(null, parentNode);
            }
        })
    });
};

module.exports.getRootNode = getRootNode;
module.exports.getChildNode = getChildNode;
module.exports.loadChildren = loadChildren;